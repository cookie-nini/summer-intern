ES6网盘视频学习
第二讲：兼容性和新特性
ES6（ES2015）---IE10+、chrome、FireFox、移动端、Nodejs
如何在不兼容的浏览器运行：
编译、转换
1、在线转换
2、提前编译 babel==browser.js=jsx
在head里引入:
<script src='browser.js'>
<script type='text/babel'>charset='utf-8'></script> 表明script文件解析为js或babel
---------------------------
特性：
1、变量
2、函数
3、数组
4、字符串
5、面向对象
6、promise  （异步交互、串行请求）
7、generator （把同步操作拆成异步操作）
8、模块化

第三讲：变量
var存在的问题：
1、可以重复声明
2、无法限制修改（没有常量）
3、没有块级作用域。var的作用域是函数
{
	
}

if（）{
	
}
这些都是语法块。块级作用域就是在块里定义的东西出去之后用不了
-----------------
ES6：
let 不能重复声明，变量，可以修改，块级作用域
const 不能重复声明，常量，不可以修改，块级作用域

补充：
1、函数作用域
所有函数的最外层是全局作用域，在全局作用域内定义的值可以在任意地方去访问。
在函数内部定义的变量是局部变量，作用域就是这个函数，不能从函数外代码其它函数内访问
如果两个函数里定义了同名变量，后出现的变量会覆盖前面的。
由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行：
function foo() {
    var x = 1;  // x相当于foo函数里的全局变量，整个函数都可以访问
    function bar() {
        var y = x + 1; // bar可以访问foo的变量x!
    }
    var z = y + 1; // ReferenceError! foo不可以访问bar的变量y!
}

2、变量提升
js的函数定义有个特点，会先扫描整个函数体的语句，把所有申明的变量提升到函数的顶部。但不会提升函数的赋值
function foo() 
{
    var x = 'Hello, ' + y;
    console.log(x);
    var y = 'Bob';
}
foo();
对于这个函数，js引擎实际看到的代码相当于：
function foo()
{
	var x;
	var y;
	x = 'Hello, ' + y;
	console.log(x)  //不报错，因为变量的声明提升，所以y是定义了的。但是现实hello，undefined，因为赋值不会提升，此时y是undefined
	y='Bob';
}

3、全局作用域
不在任何函数内定义的变量就具有全局作用域。JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。
任何变量（包括函数），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，就会referenceError报错。

4、局部作用域
function foo() 
{
    for (var i=0; i<100; i++) 
    {
        //
    }
    i += 100; // 仍然可以引用变量i
}
var的作用域是函数内部，所以对于for循环等语句块中无法定义真正的局部作用域

例子
    var a = 10;
    function test(){
    a = 100;
    console.log(a);
    console.log(this.a);
    var a;
    console.log(a);
    }
    test();
    实际js引擎执行的代码是：
    var a=10; //全局变量
    function test()
    {
        var a; //变量声明提升,这个a是函数test内部的变量，覆盖了先定义的全局变量a=10
        a=100;
        console.log(a); //输出100，因为已经覆盖了,函数test内部的a都指向已经声明的局部变量
        console.log(this.a); //输出10，函数内部的this指针指向的是函数的调用者，在这里函数test被全局对象调用，所以this指针指向全局对象（这里即window），所以this.a = window.a，
        console.log(a); //输出100，同理上上
    }

    var a = 100;
    function test(){
    console.log(a);
    var a = 10;
    console.log(a);
    }   
    test();
    实际js引擎执行的代码是：
    var a=100;
    function test()
    {
        var a; //变量声明提升，这个a是函数test内部的变量，覆盖了先定义的全局变量a=100
        console.log(a); //输出undefined，函数test内部的a都指向已经声明的局部变量，但是赋值不会提升，所以当前是undefined
        a=10；
        console.log(a); //输出10
    }

    var a = 100;
    function test()
    {
        console.log(a);
        a = 10;
        console.log(a);
    }
    test();
    console.log(a);
    实际js引擎执行的代码是：
    var a=100;
    function test()
    {
        console.log(a); //输出100。先在当前函数作用域寻找a的声明，没找到，往上找，找到全局变量a=100
        a = 10; //赋值不会提升。这里定义了一个全局变量，覆盖之前的a=100
        console.log(a); //输出10
    }
    test();
    console.log(a);  //输出10
在函数内部，一般用var声明的为局部变量，没用var声明的一般为全局变量，在test函数内，a=10声明了一个全局变量。在函数test外部，第8行输出全局变量a的值，因为全局变量被重新赋值为10，所以输出结果即为10。

5、闭包closure
如何从外部读取局部变量

第四讲：函数
1、箭头函数
（）=>{}
如果只有一个参数，（）可以省略
如果只有一个return，{}可以省略 
let show=function(a){
	return a*2;
}
即为
let show=(a)=>{return a*2};
即为
let show=a=>a*2;

2、参数
参数的扩展：收集参数、展开数组
function show(a,b){
	alert(a);
	alert(b);
}
show(12,14,34,45,56);
不难发现，可以弹出12、14，但是后面的参数不会弹出。
为什么可以传递这么多参数？js在调用函数进行传参的时候可以传任意数量的参数，和命名时无关。js在内存里接收到的参数其实是一个数组arguments
ES6新增：
function show(a,b,...args){   //当传递时超过两个参数时，那些参数放到args里
	alert(a);
	alert(b);
	alert(arrgs);	//弹出34，45，56
}
show(12,14,34,45,56);  
注意args必须放在形参的最后。

...arr意思是展开数组
let arr=[1,2,3]
function show(a,b,c){
	alert(a);
	alert(b);
	alert(c);
}
show(1,2,3); 
这句话等价于 show(...arr);

默认参数
function show(a,b=5,c=12)
{
	console.log(a,b,c);
}
show(99);   //输出99，5，12
show(99,19); //输出99，19，12
也就是说在命名的时候定义参数值，如果不传这个参数就使用这个值。如果传了就使用传递的值

第五讲：解构赋值
左右两边必须结构一样
右边必须是个东西
声明和赋值不能分开，必须在一句话里完成
数组 let [a,b,c]=[1,2,3];
json格式 let {a,c,d}={a:12,c:5,d:6};
let [{a,b},[n1,n2,n3],num,str]=[{a:12,b:5},[12,5,8],8,'cxxxx'];
let [{json,[n1,n2,n3],num,str]=[{a:12,b:5},[12,5,8],8,'cxxxx']

第六讲：数组
多了四个方法：
map  映射
reduce  汇总
filter  过滤器
foreach 循环

1、map
一个对一个
[12,45,34,23,67,45]
[不及格，不及格，不及格，及格，不及格]

[45,34,54,22]
[
	{name:'blue',level:0,role：0}，
	{name:'red',level:99,role：3}，
	{name:'blue',level:0,role：2}，
	{name:'blue',level:0,role：0}，
]

使用时用function作为参数.每一个数组元素都会执行一次map里的function
let arr=[12,5,8];
let result=arr.map(function(item){
	return item*2;
	});  // let result=arr.map(item=>item*2);
alert(result);

let score=[2,45,34,23,67,45];
let result=score.map(function(item){
	if(item>=60)
		return '及格';
	else
		return '不及格';
})
即为
let result=score.map(item=>item>=60?'及格':'不及格');

2、reduce  一堆出来一个。 算个总数，算个平均数
求和:
let arr=[23,3424,54,34,234];
let result=arr.reduce(function(tmp,item,index){  //index为item的下标
	return tmp+item; //新的tmp
})

求平均：
let result=arr.reduce(function(tmp,item,index){  
	if(index!=arr.length-1){
		return tmp+index;
	else{
		return (tmp+item)/arr.length;
	}
});

3、filter 留一部分消失一部分
let arr=[23,34,66,55,4]
let result=arr.filter(item=>{
	if(item%3==0){ //本身就是一个bool值
		return true; //留下
	}else{
		return false;
	}
})
即为
let result=arr.filter(item=>item%3==0);

let arr=[
	{title:'男士衬衫',price:75},
	{title:'女士包',price:34234},
	{title:'男士包',price:75},
	{title:'女士衬衫',price:27542},
];
let result=arr.filter(item=>item.price>=20000);

4、forEach
forEach()函数从头到尾把数组遍历一遍。有三个参数分别是：数组元素，元素的索引，数组本身（如果是一个参数就是数组元素，也就是数组的值。
let arr=[23,34,5,3];
arr.forEach(item=>{alert(item)});

加入index参数
arr.forEach((item,index)=>{alert(index+': '+item)});

注意：forEach无法在所有元素都传递给调用的函数之前终止（而for循环却有break方法），如果要提前终止，必须把forEach放在try块中，
并能抛出一个异常。如果forEach()调用的函数抛出foreach.break异常，循环会提前终止：
function foreach(a,b,c){
 try{
  a.forEach(b,c);
}catch(e){
  if(e===foreach.break)return;
 else throw e;
}
}
foreach.break=new Error("StopIteration");
}

第七讲：字符串
1、多了两个新方法
startWith 以什么开头
let str='sdsdad';
alert(str.startWith('a')) //输出false

let str='http://baidu.com';
if(str.startWith('http://'){
	alert('普通网址');
}else if（str.startWith('https://')）{
	alert('加密网址')
}

endsWith 以什么结尾
let str='1.txt';
if(str.endsWith('.txt'){
	alert(文本文件)
}

2、字符串模板
`反单引号，可以串接多行文本
let str=`abc
四大`;

可以嵌入字符串
let a=23;
let str=`a${a}bc`;
alert(str);  //输出a23bc

第八讲：面向对象
1、
原来的使用：
function User(name,pass){    //声明一个对象
	this.name=name;
	this.pass=pass;
}
User.prototype.showName=function(){
	alert(this.name);      //声明对象的方法
};
User.prototype.showPass=function(){
	alert(this.pass);
};

var u1=new User('blue','12345');   //new一个对象
u1.showName();
u1.showPass();

问题：对象的声明和构造函数一样；属性构造器和方法分开；

ES6：
class关键字，构造器和类分开了
class里面直接加方法
class User{
	constructor(name,pass){  
		this.name=name;
		this.pass=pass;
	}

	showName(){
		alert(this.name); 
	}
	showPass(){
		alert(this.pass);
	}
}

继承：扩展原有功能
原来的写法：
function VipUser(name,pass,level){
	User.call(this,name,pass);

	this.level=level
}
VipUser.prototype=new User()  //继承方法
VipUser.prototype.constructor=VipUser;

VipUser.prototypr.showLevel=function(){
	alert(this.level);
}

var v1=new VipUser('blue','12345','3');
v1.showName();
v1.showPass();
v1.showLevel();

ES6
class VipUser extends User{  //表面VipUser是User的继承类
	constructor(name,pass,level){
		super(name,pass);                //超类，父类
		this.level=level;
	}
	showLevel(){
		alert(this.level);
	}
}

2、应用---react
readt传参有两种方式：字符串、表达式{}


第九讲：json
json的标准写法：
只能用双引号
所有名字都必须用引号包起来
{a:12,b:5} x
{"a":12,"b":5} ✔

1、json对象  
字符串解析，把字符串变成json；字符串串行化，把json变成字符串
let json={a:12,b:5}
变成字符串 let str='hsdad'+JSON.stringify(json);

let str="{"a":12,"b":5}";
变成json格式 let json=JSON.parse(str);

2、简写
名字一样(key和value一样的，留一个就行)
方法（不用写：function）
let a=12;
let json={
	a:12;
	show(){alert this.a};
};
json.show();

第十讲：promise
异步请求：操作之间没啥关系，可以同时进行多个操作；会让代码更复杂
同步：同时只能做一件事；代码简单

promise——消除异步操作（封装）
 *用同步一样的方式来书写异步代码

1、promise用法
let p=new Promise(function(resolve,reject){
	//异步代码
	//resolve--成功了
	//reject--失败了
});













































